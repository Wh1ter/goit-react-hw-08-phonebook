{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","redux/app/app-operations.js","redux/app/contacts-selectors.js","views/ContactsView.js"],"names":["module","exports","ContactForm","state","name","number","handleChange","event","currentTarget","value","setState","handleSubmit","preventDefault","contactForAdd","props","onSubmitData","reset","className","style","contactform","type","onSubmit","this","TextField","label","pattern","title","required","onChange","Button","marginTop","variant","color","Component","ContactList","deleteId","Id","del","createList","contacts","map","contact","id","marginLeft","height","margin","data-id","onClick","defaultProps","Filter","setFilterValue","toUpperCase","setFilterToState","dispatch","a","actions","fetchContactRequest","axios","get","data","fetchContactSuccess","deleteContactError","message","addContactRequest","post","then","addContactSuccess","catch","error","addContactError","contactId","deleteContactRequest","delete","deleteContactSuccess","getFilter","app","filters","getContacts","getIsLoading","loading","getVisibleFilterArray","createSelector","filter","newArr","includes","ContactsView","fetchContacts","isLoadingContacts","formSubmitHandler","filterSet","visibleArray","contactDelete","connect","selectors","appOperations","contactData","str","appActions"],"mappings":"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","file":"static/js/4.7e012547.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactform\":\"ContactForm_contactform__276W4\"};","import style from \"./ContactForm.module.css\";\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\n\nclass ContactForm extends Component {\n  state = {\n    name: \"\",\n    number: \"\",\n  };\n  handleChange = (event) => {\n    const { name, value } = event.currentTarget;\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    let contactForAdd = { name: this.state.name, number: this.state.number };\n\n    this.props.onSubmitData(contactForAdd);\n\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({ name: \"\", number: \"\" });\n  };\n  render() {\n    return (\n      <div className={style.contactform}>\n        <form type=\"submit\" onSubmit={this.handleSubmit}>\n          <TextField\n            label=\"Name:\"\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            onChange={this.handleChange}\n            value={this.state.name}\n          />\n          <TextField\n            label=\"Number:\"\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\n            title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\n            required\n            onChange={this.handleChange}\n            value={this.state.number}\n          />\n          <br />\n          <Button\n            style={{ marginTop: 25 }}\n            type=\"submit\"\n            variant=\"contained\"\n            color=\"primary\"\n          >\n            Add contact\n          </Button>\n        </form>\n      </div>\n    );\n  }\n}\n\nContactForm.propTypes = {\n  onSubmitData: PropTypes.func.isRequired,\n};\nexport default ContactForm;","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Button from \"@material-ui/core/Button\";\n\nclass ContactList extends Component {\n  deleteId = (Id) => {\n    this.props.del(Id);\n  };\n  createList = () => {\n    return this.props.contacts.map((contact) => {\n      return (\n        <li key={contact.id} id={contact.id}>\n          <Button\n            style={{ marginLeft: 25, height: 30, margin: 5 }}\n            data-id={contact.id}\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={() => this.deleteId(contact.id)}\n          >\n            Delete\n          </Button>\n          {`${contact.name}: ${contact.number}`}\n        </li>\n      );\n    });\n  };\n\n  render() {\n    return <ul>{this.createList()}</ul>;\n  }\n}\nContactList.propTypes = {\n  contacts: PropTypes.array,\n  del: PropTypes.func.isRequired,\n};\nContactList.defaultProps = {\n  contacts: [],\n};\n\nexport default ContactList;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport TextField from \"@material-ui/core/TextField\";\n\nclass Filter extends Component {\n  setFilterValue = (event) => {\n    let value = event.currentTarget.value.toUpperCase();\n    this.props.setFilterToState(value);\n  };\n\n  render() {\n    return (\n      <div>\n        <TextField label=\"Filter \" onChange={this.setFilterValue} />\n      </div>\n    );\n  }\n}\n\nFilter.propTypes = {\n  setFilterToState: PropTypes.func.isRequired,\n};\nexport default Filter;\n","import axios from \"axios\";\nimport actions from \"./app-actions\";\n\n//ASYNC Version\nconst fetchContacts = () => async (dispatch) => {\n  dispatch(actions.fetchContactRequest());\n  try {\n    const { data } = await axios.get(\"/contacts\");\n    dispatch(actions.fetchContactSuccess(data));\n  } catch (error) {\n    dispatch(actions.deleteContactError(error.message));\n  }\n};\nconst addContact = (contact) => (dispatch) => {\n  dispatch(actions.addContactRequest());\n\n  axios\n    .post(\"/contacts\", contact)\n    .then(({ data }) => dispatch(actions.addContactSuccess(data)))\n    .catch((error) => dispatch(actions.addContactError(error.message)));\n};\n\nconst deleteContact = (contactId) => (dispatch) => {\n  dispatch(actions.deleteContactRequest());\n  axios\n    .delete(`/contacts/${contactId}`)\n    .then(() => dispatch(actions.deleteContactSuccess(contactId)))\n    .catch((error) => dispatch(actions.deleteContactError(error.message)));\n};\n\n// eslint-disable-next-line\nexport default {\n  fetchContacts,\n  addContact,\n  deleteContact,\n};\n","import { createSelector } from \"@reduxjs/toolkit\";\n\nconst getIsLoading = (state) => state.app.loading;\nconst getFilter = (state) => state.app.filters;\nconst getContacts = (state) => state.app.contacts;\n\n/* const getVisibleFilterArray = (state) => {\n  const allContacts = getContacts(state);\n  const filterNames = getFilter(state);\n  let newArr = allContacts.filter(({ name }) =>\n    name.toUpperCase().includes(filterNames)\n  );\n  return [...newArr];\n}; */\n\n// add memo\nconst getVisibleFilterArray = createSelector(\n  [getContacts, getFilter],\n  (contacts, filter) => {\n    let newArr = contacts.filter(({ name }) =>\n      name.toUpperCase().includes(filter)\n    );\n    return [...newArr];\n  }\n);\n\n// eslint-disable-next-line\nexport default {\n  getIsLoading,\n  getFilter,\n  getContacts,\n  getVisibleFilterArray,\n};\n","import React, { Component } from \"react\";\nimport ContactForm from \"../components/ContactForm/ContactForm\";\nimport ContactList from \"../components/ContactList/ContactList\";\nimport Filter from \"../components/Filter/Filter\";\nimport appActions from \"../redux/app/app-actions\";\nimport appOperations from \"../redux/app/app-operations\";\nimport { connect } from \"react-redux\";\nimport selectors from \"../redux/app/contacts-selectors\";\n\nclass ContactsView extends Component {\n  componentDidMount() {\n    this.props.fetchContacts();\n  }\n\n  render() {\n    return (\n      <div className=\"contacts\">\n        <h1>Phonebook</h1>\n        {this.props.isLoadingContacts && <h2>Loading ...</h2>}\n        <ContactForm onSubmitData={this.props.formSubmitHandler} />\n        <h1>Contacts</h1>\n        <Filter setFilterToState={this.props.filterSet} />\n        <ContactList\n          contacts={this.props.visibleArray}\n          del={this.props.contactDelete}\n        />\n      </div>\n    );\n  }\n}\nconst mapStateToProps = (state) => ({\n  isLoadingContacts: selectors.getIsLoading(state),\n  contacts: selectors.getContacts(state),\n  filter: selectors.getFilter(state),\n  visibleArray: selectors.getVisibleFilterArray(state),\n});\n\nconst mapDispatchToProrps = (dispatch) => ({\n  fetchContacts: () => dispatch(appOperations.fetchContacts()),\n  formSubmitHandler: (contactData) =>\n    dispatch(appOperations.addContact(contactData)),\n  contactDelete: (contactId) =>\n    dispatch(appOperations.deleteContact(contactId)),\n  filterSet: (str) => dispatch(appActions.filterSet(str)),\n});\nexport default connect(mapStateToProps, mapDispatchToProrps)(ContactsView);\n"],"sourceRoot":""}